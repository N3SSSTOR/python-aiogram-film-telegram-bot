from aiogram import Router, F 
from aiogram.types import CallbackQuery
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest
from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.fsm.context import FSMContext

from app.utils.captcha.start_captcha import start_captcha
from app.utils.get_user_profile_text import get_user_profile_text
from app.utils.messages.main_menu_message import send_main_menu_message
from app.keyboards.inline_keyboards import *
from app.database.models import User
from app.fsm.token_states import TokenStates

from config import *


callback_router = Router()


@callback_router.callback_query(F.data == "copy_bot", StateFilter(None))
async def copy_bot(callback: CallbackQuery, state: FSMContext):
    user: User = User.get(
        telegram_id=callback.from_user.id 
    )

    await state.set_state(TokenStates.token)

    match user.lang:
        case "RU":
            await callback.message.answer(
                "<em>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞</em>"
            )

        case "ENG":
            await callback.message.answer(
                "<em>Enter bot token</em>"
            )
    

@callback_router.callback_query(F.data == "i_subscribed")
async def i_subscribed(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )
    
    member = await callback.message.bot.get_chat_member(chat_id=AD_CHANNEL_ID, user_id=callback.from_user.id)
    if member.status == ChatMemberStatus.LEFT:
        await callback.message.reply(
            "üëé"
        )

    if member.status != ChatMemberStatus.LEFT:
        await callback.message.reply(
            "üëç",
            # reply_markup=main_reply_keyboard()
        )
        user.membered = True 
        user.save()

        match user.lang:
            case "RU":
                await callback.message.answer(
                    text=f"üìÑ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>" + \
                    f"\n\n/help -  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ" + \
                    f"\n/menu -  –ú–µ–Ω—é üìã" + \
                    f"\n\n/find - –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–≥–∞–º üîç <em>(–Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä—ã)</em>" + \
                    f"\n/find <em>—Å–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞</em> ‚úÖ" + \
                    f"\n/find <em>–°–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞. –ö—Ä–æ–≤—å –Ω–∞ –∞—Å—Ñ–∞–ª—å—Ç–µ</em> ‚úÖ" + \
                    f"\n/find <em>–Ω–∞–π–¥–∏ —Å–µ—Ä–∏–∞–ª —Å–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞</em> ‚ùå" + \
                    f"\n/find <em>—Å–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞ —Å–º–æ—Ç—Ä–µ—Ç—å</em> ‚ùå",
                    reply_markup=get_back_keyboard()
                )

            case "ENG":
                await callback.message.answer(
                    text=f"üìÑ <b>Instructions for using the bot</b>" + \
                    f"\n\n/help -  Instructions üìÑ" + \
                    f"\n/menu -  Menu üìã" + \
                    f"\n\n/find - Find content by tags üîç <em>(below are examples)</em>" + \
                    f"\n/find <em>breaking bad</em> ‚úÖ" + \
                    f"\n/find <em>Breaking Bad</em> ‚úÖ" + \
                    f"\n/find <em>find breaking bad</em> ‚ùå" + \
                    f"\n/find <em>breaking bad online free</em> ‚ùå",
                    reply_markup=eng_get_back_keyboard()
                )   


@callback_router.callback_query(F.data == "regenerate_captcha")
async def regenerate_captcha(callback: CallbackQuery):
    await callback.message.delete()
    await start_captcha(callback=callback)


@callback_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id 
    )

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text=get_user_profile_text(callback=callback),
                reply_markup=get_main_menu_keyboard()
            )

        case "ENG":
            await callback.message.edit_text(
                text=get_user_profile_text(callback=callback),
                reply_markup=eng_get_main_menu_keyboard()
            )


@callback_router.callback_query(F.data == "main_menu_settings")
async def main_menu_settings(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id 
    )

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text=f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{callback.from_user.first_name}</b> üë§",
                reply_markup=get_main_menu_settings_keyboard()
            )

        case "ENG":
            await callback.message.edit_text(
                text=f"‚öôÔ∏è User settings <b>{callback.from_user.first_name}</b> üë§",
                reply_markup=eng_get_main_menu_settings_keyboard()
            )


@callback_router.callback_query(F.data == "change_lang")
async def main_menu_settings(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id 
    )

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text=f"<em>–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:</em>" + \
                    f"\n\nüá∑üá∫ <b>RU</b> - <em>–†—É—Å—Å–∫–∏–π</em>" + \
                    f"\nüá¨üáß <b>ENG</b> - <em>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π</em>",
                reply_markup=get_change_lang_keyboard()
            )

        case "ENG":
            await callback.message.edit_text(
                text=f"<em>Available languages:</em>" + \
                    f"\n\nüá∑üá∫ <b>RU</b> - <em>Russian</em>" + \
                    f"\nüá¨üáß <b>ENG</b> - <em>English</em>",
                reply_markup=eng_get_change_lang_keyboard()
            )


@callback_router.callback_query(F.data == "change_lang_ru")
async def main_menu_settings(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )
    user.lang = "RU"

    user.save()

    await callback.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!")
    await callback.message.edit_text(
        text=get_user_profile_text(callback=callback),
        reply_markup=get_main_menu_keyboard()
    )


@callback_router.callback_query(F.data == "change_lang_eng")
async def main_menu_settings(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )
    user.lang = "ENG"

    user.save()

    await callback.answer("Language changed!")
    await callback.message.edit_text(
        text=get_user_profile_text(callback=callback),
        reply_markup=eng_get_main_menu_keyboard()
    )


@callback_router.callback_query(F.data == "main_menu_subscribe")
async def main_menu_settings(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )

    if user.subscribe_status:
        match user.lang:
            case "RU":
                await callback.message.edit_text(
                    text=f"<em>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ <b>–ê–∫—Ç–∏–≤–Ω–∞</b></em> üî•",
                    reply_markup=get_back_keyboard()
                )

            case "ENG":
                await callback.message.edit_text(
                    text=f"<em>Your subscribe <b>Active</b></em> üî•",
                    reply_markup=eng_get_back_keyboard()
                )

    else:
        match user.lang:
            case "RU":
                await callback.message.edit_text(
                    text=f"<em>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</b></em> üòê",
                    reply_markup=get_main_menu_subscribe_keyboard()
                )

            case "ENG":
                await callback.message.edit_text(
                    text=f"<em>Your subscribe <b>Inactive</b></em> üòê",
                    reply_markup=eng_get_main_menu_subscribe_keyboard()
                )


@callback_router.callback_query(F.data == "main_menu_partners")
async def main_menu_partners(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text=f"<em>–°—Ç–∞–Ω—å—Ç–µ –Ω–∞—à–∏–º <b>–ø–∞—Ä—Ç–Ω–µ—Ä–æ–º</b></em> ü§ùüí∏",
                reply_markup=get_main_menu_partners_keyboard()
            )

        case "ENG":
            await callback.message.edit_text(
                text=f"<em>Become ours <b>partner</b></em> ü§ùüí∏",
                reply_markup=eng_get_main_menu_partners_keyboard()
            )


@callback_router.callback_query(F.data == "order_subscribe")
async def order_subscribe(callback: CallbackQuery):
    try:
        user: User = User.get(
            telegram_id=callback.from_user.id
        )

        match user.lang:
            case "RU":
                await callback.message.edit_text(
                    text=get_user_profile_text(callback=callback),
                    reply_markup=get_main_menu_keyboard()
                )

            case "ENG":
                await callback.message.edit_text(
                    text=get_user_profile_text(callback=callback),
                    reply_markup=eng_get_main_menu_keyboard()
                )

        match user.lang:
            case "RU":
                match user.wait_check:
                    case 0:
                        await callback.message.answer(
                            text="<em>–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É</em>",
                            reply_markup=get_payed_keyboard()
                        )

                    case 1:
                        await callback.message.answer(
                            text="<em>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É</em>",
                        )       

                    case 2:
                        await callback.message.answer(
                            text="<em>–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ...</em>",
                        )          

            case "ENG":
                match user.wait_check:
                    case 0:
                        await callback.message.answer(
                            text="<em>Make a payment</em>",
                            reply_markup=eng_get_payed_keyboard()
                        )

                    case 1:
                        await callback.message.answer(
                            text="<em>Send a screenshot confirming payment</em>",
                        )       

                    case 2:
                        await callback.message.answer(
                            text="<em>Your payment is being verified...</em>",
                        )  

    except TelegramBadRequest:
        user: User = User.get(
            telegram_id=callback.from_user.id
        )

        match user.lang:
            case "RU":
                await callback.message.answer(
                    text=get_user_profile_text(callback=callback),
                    reply_markup=get_main_menu_keyboard()
                )

            case "ENG":
                await callback.message.answer(
                    text=get_user_profile_text(callback=callback),
                    reply_markup=eng_get_main_menu_keyboard()
                )

        match user.lang:
            case "RU":
                match user.wait_check:
                    case 0:
                        await callback.message.answer(
                            text="<em>–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É</em>",
                            reply_markup=get_payed_keyboard()
                        )

                    case 1:
                        await callback.message.answer(
                            text="<em>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É</em>",
                        )       

                    case 2:
                        await callback.message.answer(
                            text="<em>–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ...</em>",
                        )          

            case "ENG":
                match user.wait_check:
                    case 0:
                        await callback.message.answer(
                            text="<em>Make a payment</em>",
                            reply_markup=eng_get_payed_keyboard()
                        )

                    case 1:
                        await callback.message.answer(
                            text="<em>Send a screenshot confirming payment</em>",
                        )       

                    case 2:
                        await callback.message.answer(
                            text="<em>Your payment is being verified...</em>",
                        )           


@callback_router.callback_query(F.data == "payed")
async def payed(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )
    user.wait_check = 1

    user.save()

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text="<em>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É</em>"
            )

        case "ENG":
            await callback.message.edit_text(
                text="<em>Send a screenshot confirming payment</em>"
            )


@callback_router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text=f"üìÑ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>" + \
                f"\n\n/help -  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìÑ" + \
                f"\n/menu -  –ú–µ–Ω—é üìã" + \
                f"\n\n/find - –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–≥–∞–º üîç <em>(–Ω–∏–∂–µ –ø—Ä–∏–º–µ—Ä—ã)</em>" + \
                f"\n/find <em>—Å–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞</em> ‚úÖ" + \
                f"\n/find <em>–°–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞. –ö—Ä–æ–≤—å –Ω–∞ –∞—Å—Ñ–∞–ª—å—Ç–µ</em> ‚úÖ" + \
                f"\n/find <em>–Ω–∞–π–¥–∏ —Å–µ—Ä–∏–∞–ª —Å–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞</em> ‚ùå" + \
                f"\n/find <em>—Å–ª–æ–≤–æ –ø–∞—Ü–∞–Ω–∞ —Å–º–æ—Ç—Ä–µ—Ç—å</em> ‚ùå",
                reply_markup=get_back_keyboard()
            )

        case "ENG":
            await callback.message.edit_text(
                text=f"üìÑ <b>Instructions for using the bot</b>" + \
                f"\n\n/help -  Instructions üìÑ" + \
                f"\n/menu -  Menu üìã" + \
                f"\n\n/find - Find content by tags üîç <em>(below are examples)</em>" + \
                f"\n/find <em>breaking bad</em> ‚úÖ" + \
                f"\n/find <em>Breaking Bad</em> ‚úÖ" + \
                f"\n/find <em>find breaking bad</em> ‚ùå" + \
                f"\n/find <em>breaking bad online free</em> ‚ùå",
                reply_markup=eng_get_back_keyboard()
            )


@callback_router.callback_query(F.data == "ref")
async def ref(callback: CallbackQuery):
    user: User = User.get(
        telegram_id=callback.from_user.id
    )

    match user.lang:
        case "RU":
            await callback.message.edit_text(
                text=f"<em>üéÅ –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</em>: <code><b>{user.self_ref_url}</b></code>" + \
                    f"\n\n–ó–∞ –∫–∞–∂–¥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ <b>10 RUB</b> üìà",
                reply_markup=get_back_keyboard()
            )

        case "ENG":
            await callback.message.edit_text(
                text=f"<em>üéÅ Your referal link</em>: <code><b>{user.self_ref_url}</b></code>" + \
                    f"\n\nFor each use, your balance will be replenished by <b>10 RUB</b> üìà",
                reply_markup=eng_get_back_keyboard()
            )


@callback_router.callback_query(F.data.startswith("accept_"))
async def accept(callback: CallbackQuery):
    user_id = callback.data.split("_")[1]

    user: User = User.get(
        telegram_id=user_id 
    )

    user.subscribe_status = 1
    user.wait_check = 0
    user.save()

    match user.lang:
        case "RU":
            await callback.bot.send_message(
                chat_id=user_id,
                text="<em>–í–∞—à –ø–ª–∞—Ç–µ–∂ <b>–æ–¥–æ–±—Ä–µ–Ω</b></em> ‚úÖ"
            )

        case "ENG":
            await callback.bot.send_message(
                chat_id=user_id,
                text="<em>Your payment was <b>accepted</b></em> ‚úÖ"
            )

    await callback.message.reply(
        "Accepted ‚úÖ"
    )


@callback_router.callback_query(F.data.startswith("reject_"))
async def reject(callback: CallbackQuery):
    user_id = callback.data.split("_")[1]

    user: User = User.get(
        telegram_id=user_id 
    )

    user.wait_check = 0
    user.subscribe_status = 0
    user.save()

    match user.lang:
        case "RU":
            await callback.bot.send_message(
                chat_id=user_id,
                text="<em>–í–∞—à –ø–ª–∞—Ç–µ–∂ <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω</b></em> ‚ùå"
            )

        case "ENG":
            await callback.bot.send_message(
                chat_id=user_id,
                text="<em>Your payment was <b>rejected</b></em> ‚ùå"
            )

    await callback.message.reply(
        "Rejected ‚ùå"
    )